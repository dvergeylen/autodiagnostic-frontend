{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores/gameState.ts","../../src/enums.ts","../../src/stores/appStatus.ts","../../src/WelcomeScreen.svelte","../../src/GameScreenNavbar.svelte","../../src/stores/chapters.ts","../../src/GameScreenDialogNodes.svelte","../../src/ResultScreen.svelte","../../src/ErrorScreen.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached\n    const children = target.childNodes;\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        const seqLen = upper_bound(1, longest + 1, idx => children[m[idx]].claim_order, current) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        if (node !== target.actual_end_child) {\n            target.insertBefore(node, target.actual_end_child);\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append(target, node);\n    }\n    else if (node.parentNode !== target || (anchor && node.nextSibling !== anchor)) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                processNode(node);\n                nodes.splice(i, 1);\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                processNode(node);\n                nodes.splice(i, 1);\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n    }, () => svg ? svg_element(name) : element(name));\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        node.data = '' + data;\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTag();\n    }\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    return new HtmlTag(html_tag_nodes.slice(1, html_tag_nodes.length - 1));\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(claimed_nodes) {\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            if (this.l) {\n                this.n = this.l;\n            }\n            else {\n                this.h(html);\n            }\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.3' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","// This store represents a game state: all DialogNodes already played,\n// grouped by chapter\nimport { writable, derived } from 'svelte/store';\nconst newGame = {\n    gender: '',\n    language: 'fr',\n    attribution: {\n        leader: 0,\n        bricoleur: 0,\n        coequipier: 0,\n        planificateur: 0,\n        idealiste: 0,\n        creatif: 0,\n        audacieux: 0,\n        explorateur: 0\n    },\n    nodes: {},\n};\nexport const gameState = writable(newGame);\nexport const currentChapterId = derived(gameState, $gameState => Object.keys($gameState.nodes).reduce((id, k) => k > id ? k : id, \"1\"));\n","export var GameStatus;\n(function (GameStatus) {\n    GameStatus[GameStatus[\"UNSTARTED\"] = 0] = \"UNSTARTED\";\n    GameStatus[GameStatus[\"ONGOING\"] = 1] = \"ONGOING\";\n    GameStatus[GameStatus[\"PAUSED\"] = 2] = \"PAUSED\";\n    GameStatus[GameStatus[\"FINISHED\"] = 3] = \"FINISHED\";\n    GameStatus[GameStatus[\"ERROR\"] = 4] = \"ERROR\";\n})(GameStatus || (GameStatus = {}));\n","// This store represents the App status\nimport { writable } from 'svelte/store';\nimport { GameStatus } from '../enums';\nexport const appStatus = writable(GameStatus.UNSTARTED);\n","<script lang=\"ts\">\n  import { gameState } from './stores/gameState';\n  import { appStatus } from './stores/appStatus';\n  import { GameStatus } from './enums';\n\n  let newGamePressed: boolean = false;\n  let isNewGame = false;\n  let isGenderConfigured: boolean;\n\n  function toggleNewGamePressed() {\n    newGamePressed = !newGamePressed;\n  }\n\n  function startGame() {\n    $appStatus = GameStatus.ONGOING;\n  }\n\n  function startNewGame(gender: 'm' | 'f') {\n    $gameState.gender = gender;\n    $gameState.nodes = {};\n    startGame();\n  }\n\n  $: isNewGame = (Object.entries($gameState.nodes).length === 0);\n  $: isGenderConfigured = ($gameState?.gender?.length || 0) > 0;\n</script>\n\n<main>\n  <h1>Voyage au bout du monde</h1>\n  <h3>Une aventure d'introspection</h3>\n  <div class=\"is-grid\">\n    {#if isNewGame && isGenderConfigured }\n      <button class:pressed={!newGamePressed} on:click={startGame}>\n        Continuer\n    </button>\n    {/if}\n    <button on:click={toggleNewGamePressed} class:pressed={newGamePressed}>\n      Nouvelle Partie\n    </button>\n  </div>\n  <div class:is-hidden={!newGamePressed} class=\"is-grid protagoniste\">\n    Protagoniste:\n    <button on:click={() => startNewGame('m')}>\n      <svg class=\"icon\" >\n        <use href='assets/sprite_icons.svg#mars' />\n      </svg>\n      Masculin\n    </button>\n    <button on:click={() => startNewGame('f')}>\n      <svg class=\"icon\" >\n        <use href='assets/sprite_icons.svg#venus' />\n      </svg>\n      Féminin\n    </button>\n  </div>\n</main>\n\n<style lang=\"scss\">\n\n  .protagoniste {\n    padding: 1em;\n    border: 1px solid black;\n    max-width: 80%;\n    margin: 1em auto auto auto;\n  }\n\n  button {\n    width: 15em;\n    margin: 1em auto auto auto; /* top right bottom left */\n  }\n\n  // Commons\n  h1 {\n    color: #a10000;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 50em;\n    margin: 0 auto;\n  }\n  .is-grid {\n    display: grid;\n  }\n  .is-hidden {\n    display: none;\n  }\n  .icon {\n    width: 1em;\n    height: 1em;\n    color: #1F1F1F;\n    vertical-align: middle;\n  }\n  button.pressed {\n    background-color: #a10000;\n    color: white;\n  }\n</style>","<script lang=\"ts\">\n  import { appStatus } from './stores/appStatus';\n  import { GameStatus } from './enums';\n\n  function updateAppStatus() {\n    appStatus.set(GameStatus.PAUSED);\n  }\n\n  // Debug\n  function gotToResultScreen() {\n    appStatus.set(GameStatus.FINISHED);\n  }\n</script>\n\n<div id=\"navbar\" class=\"is-flex is-justify-content-center\">\n  <svg class=\"icon navbar-icon\" on:click={updateAppStatus}>\n    <use href='assets/sprite_icons.svg#home' />\n  </svg>\n  <svg on:click={gotToResultScreen} class=\"icon navbar-icon\">\n    <use href='assets/sprite_icons.svg#square' />\n  </svg>\n  <svg class=\"icon navbar-icon\">\n    <use href='assets/sprite_icons.svg#square' />\n  </svg>\n  <svg class=\"icon navbar-icon\">\n    <use href='assets/sprite_icons.svg#square' />\n  </svg>\n  <svg class=\"icon navbar-icon\">\n    <use href='assets/sprite_icons.svg#square' />\n  </svg>\n  <svg class=\"icon navbar-icon\">\n    <use href='assets/sprite_icons.svg#square' />\n  </svg>\n  <svg class=\"icon navbar-icon\">\n    <use href='assets/sprite_icons.svg#square' />\n  </svg>\n</div>\n\n<style lang=\"scss\">\n  #navbar {\n    position: sticky;\n    top: 0;\n    margin: 0;\n    padding-top: 0.5em;\n    padding-bottom: 0.5em;\n    background: white;\n  }\n  .navbar-icon {\n    margin-right: 0.5em;\n    cursor: pointer;\n  }\n  // Commons\n  .is-flex {\n    display: flex;\n  }\n  .is-justify-content-center {\n    justify-content: center;\n  }\n  .icon {\n    width: 1em;\n    height: 1em;\n    color: #1F1F1F;\n    vertical-align: middle;\n  }\n</style>","import { readable } from 'svelte/store';\nexport const chapters = readable({}, start);\nfunction start(set) {\n    // Array(6) should be Array(10) when all chapters will be available\n    const promises = Array.from(Array(6).keys()).map(async (i) => {\n        const scenarioFile = await fetch(`chapters/chapitre${String(i + 1).padStart(2, '0')}.json`);\n        if (scenarioFile.ok) {\n            const scenario = await scenarioFile.text();\n            return JSON.parse(scenario);\n        }\n        else {\n            throw new Error(`Impossible de lire le scénario n°${String(i + 1).padStart(2, '0')}`);\n        }\n    });\n    // Transform Array<Scenario> into an adressable Hash {[scenarioId]: DialogNodes}\n    Promise.all(promises).then((chaptersArray) => {\n        const results = chaptersArray.reduce((acc, scenario) => (Object.assign(Object.assign({}, acc), { [scenario.metadata.chapter]: scenario.dialogNodes })), {});\n        set(results);\n    }).catch((e) => {\n        set({ error: e.message });\n    });\n    return function stop() { }; // Nothing to do when stopping\n}\n","<script lang=\"ts\">\n  import { onMount, afterUpdate, tick } from 'svelte';\n  import { appStatus } from './stores/appStatus';\n  import { GameStatus } from './enums';\n  import { gameState, currentChapterId } from './stores/gameState';\n  import { chapters } from './stores/chapters';\n\n  let displayedNodeIds: Array<string>;\n  let displayNextChapterBox: boolean = false;\n  let displayResultsBox: boolean = false;\n  let nextChapterId: number;\n  let answersNodeIds: Array<string> = [];\n  let showIsTyping: boolean = false;\n  let npc1Typing: boolean = false;\n  let playerTyping: boolean = false;\n  let narratorTyping: boolean = false;\n\n  // Display error screen if unable to load chapters\n  $: if (Object.keys($chapters).includes('error')) {\n    appStatus.set(GameStatus.ERROR);\n  }\n\n  function displayResultsScreen() {\n    appStatus.set(GameStatus.FINISHED);\n  }\n\n  async function startNextChapter() {\n    $gameState.nodes[String(nextChapterId)] = [];\n    displayNextChapterBox = false;\n    await tick();\n    displayNextDialogNode(undefined, true);\n  }\n\n  function displayAnswerDialogBox(nextNodeIds: Array<string>) {\n    answersNodeIds = nextNodeIds;\n  }\n\n  function displayNextDialogNode(parentNodeId: string | undefined, isRootNode: boolean = false) {\n    // '1' is nextNode is there is no previous node (e.g: chapter root node)\n    const nextNodeIds: Array<string> = isRootNode ? [\"1\"] : $chapters[$currentChapterId][parentNodeId].nextNodes;\n    const nextNodes: Array<DialogNode> = Object.entries<DialogNode>($chapters[$currentChapterId])\n      .filter(([_, n]) => nextNodeIds.includes(n.id))\n      .map(([_, n]) => n);\n    const previousSpeaker: \"Player\" | \"NPC1\" | \"Narrator\" = $chapters[$currentChapterId][parentNodeId || \"1\"].character;\n    const currentSpeaker = nextNodes.reduce<\"Player\" | \"NPC1\" | \"Narrator\">((acc, n: DialogNode) => {\n      return (acc === \"Player\") || (n.character === \"Player\") ? 'Player' : acc;\n    }, nextNodes[0]?.character || \"NPC1\");\n    npc1Typing = currentSpeaker === 'NPC1';\n    playerTyping = currentSpeaker === 'Player';\n    narratorTyping = currentSpeaker === 'Narrator';\n\n\n\n    // End of Chapter\n    if (nextNodes.length === 0) {\n      const maxChapterId = Object.keys($chapters).reduce((id, k) => Number(k) > id ? Number(k) : id, 1);\n      nextChapterId = Number($currentChapterId) + 1;\n      if (maxChapterId >= nextChapterId) {\n        displayNextChapterBox = true;\n      } else {\n        displayResultsBox = true;\n      }\n\n    // Display Answer DialogNode div:\n    // - when transitioning from NPCx → Player (event if 1 choice)\n    // - when Player and multiple nextNodes\n    } else if (currentSpeaker === 'Player' && (nextNodes.length > 1)) {\n      const timerReply = 1000;\n      setTimeout(() => {\n        displayAnswerDialogBox(nextNodeIds);\n      }, timerReply);\n\n    // Narrator, display node immediately\n    } else if (currentSpeaker === 'Narrator') {\n      $gameState.nodes[$currentChapterId] = [...($gameState.nodes[$currentChapterId] || []), nextNodeIds[0]];\n\n      // Call next DialogNode, if any\n      displayNextDialogNode(nextNodeIds[0]);\n\n    // Display next node, after a random time typing\n    } else {\n      const timerIsTyping = Math.floor(Math.random() * (750 - 500 + 1) + 500);\n      setTimeout(() => {\n        showIsTyping = true;\n\n        const timerReply = Math.floor(Math.random() * (2000 - 1000 + 1) + 1000);\n        setTimeout(() => {\n          showIsTyping = false;\n          $gameState.nodes[$currentChapterId] = [...($gameState.nodes[$currentChapterId] || []), nextNodeIds[0]];\n\n          // Call recursively\n          displayNextDialogNode(nextNodeIds[0]);\n        }, timerReply);\n      }, timerIsTyping);\n    }\n  }\n\n  function addAnswer(dialogNodeid: string) {\n    // Clear AnswerDialogBox\n    answersNodeIds = [];\n\n    // Append to displayedNodeIds\n    $gameState.nodes[$currentChapterId] = [...($gameState.nodes[$currentChapterId] || []), dialogNodeid];\n\n    // Update gameState\n    if ($chapters[$currentChapterId][dialogNodeid].character === 'Player') {\n      $gameState.attribution = Object.entries($gameState.attribution).reduce((acc, [k, v]) => ({\n        ...acc,\n        [k]: v + $chapters[$currentChapterId][dialogNodeid].attribution[k],\n      }), {\n        leader: 0,\n        bricoleur: 0,\n        coequipier: 0,\n        planificateur: 0,\n        idealiste: 0,\n        creatif: 0,\n        audacieux: 0,\n        explorateur: 0\n      });\n    }\n\n    // Continue dialog, if any\n    displayNextDialogNode(dialogNodeid);\n  }\n\n  function waitStoresToLoad() {\n    // Stores fully loaded\n    if (Object.keys($chapters).length > 0) {\n      const parentNodeId = displayedNodeIds[displayedNodeIds.length - 1];\n      displayNextDialogNode(parentNodeId, (parentNodeId === undefined)); // Display next Dialog box or append DialogNodes\n\n    // Stores not fully loaded, yet\n    } else {\n      setTimeout(waitStoresToLoad, 10);\n    }\n  }\n\n  onMount(async () => {\n    waitStoresToLoad();\n  });\n\n  afterUpdate(() => {\n    window.scrollTo(0,document.body.scrollHeight);\n  })\n\n  $: displayedNodeIds = ($gameState.nodes[$currentChapterId] || []);\n</script>\n\n\n<div id=\"dialog-container-background\">\n  {#if $chapters[$currentChapterId]}\n    <div id=\"dialog-container\">\n      {#each displayedNodeIds as dialogNodeId (dialogNodeId)}\n        <div\n          class:npc1={$chapters[$currentChapterId][dialogNodeId].character === 'NPC1'}\n          class:player={$chapters[$currentChapterId][dialogNodeId].character === 'Player'}\n          class:narrator={$chapters[$currentChapterId][dialogNodeId].character === 'Narrator'}>\n          {#if $chapters[$currentChapterId][dialogNodeId].imagePath}\n            <img src=\"{$chapters[$currentChapterId][dialogNodeId].imagePath}\"\n              alt=\"{$chapters[$currentChapterId][dialogNodeId].imageAlt}\" />\n          {:else}\n            <p>\n              {#if $chapters[$currentChapterId][dialogNodeId].text[$gameState.language] instanceof Object}\n                {$chapters[$currentChapterId][dialogNodeId].text[$gameState.language][$gameState.gender]}\n              {:else}\n                {$chapters[$currentChapterId][dialogNodeId].text[$gameState.language]}\n              {/if}\n            </p>\n          {/if}\n        </div>\n      {/each}\n      <div id=\"typing-container\" class:is-hidden={!showIsTyping} class:npc1={npc1Typing} class:player={playerTyping}>\n        <p>\n          ...\n        </p>\n      </div>\n    </div>\n    <div id=\"answer-container\">\n      <div class=\"player\" class:is-inline-flex={answersNodeIds.reduce((acc, id) => acc || $chapters[$currentChapterId][id].imagePath, false)}>\n        {#each answersNodeIds as answerDialogNodeId (answerDialogNodeId)}\n            {#if $chapters[$currentChapterId][answerDialogNodeId].imagePath}\n              <img src=\"{$chapters[$currentChapterId][answerDialogNodeId].imagePath}\"\n              alt=\"{$chapters[$currentChapterId][answerDialogNodeId].imageAlt}\"\n               on:click={() => addAnswer(answerDialogNodeId)}/>\n            {:else}\n              <p class=\"choice\" on:click={() => addAnswer(answerDialogNodeId)}>\n                {#if $chapters[$currentChapterId][answerDialogNodeId].text[$gameState.language] instanceof Object}\n                  {$chapters[$currentChapterId][answerDialogNodeId].text[$gameState.language][$gameState.gender]}\n                {:else}\n                  {$chapters[$currentChapterId][answerDialogNodeId].text[$gameState.language]}\n                {/if}\n              </p>\n            {/if}\n        {/each}\n      </div>\n    </div>\n    {#if displayNextChapterBox}\n      <div id=\"next-chapter-container\" on:click={startNextChapter}>\n        <p>Continuer (Chapitre {nextChapterId}) →</p>\n      </div>\n    {/if}\n    {#if displayResultsBox}\n      <div id=\"next-chapter-container\" on:click={displayResultsScreen}>\n        <p>Fin de l'Aventure (Résultats) →</p>\n      </div>\n    {/if}\n  {:else}\n    <p>Chargement...</p>\n  {/if}\n</div>\n\n<style lang=\"scss\">\n\n  #dialog-container-background {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    background-color: #E0E0E0;\n    padding-bottom: 1em;\n\n    #dialog-container, #answer-container {\n      display: grid;\n      padding-top: 1em;\n      grid-gap: 0.5em;\n\n      div {\n        height: min-content;\n        padding-left: 1em;\n        padding-right: 1em;\n        width: -moz-fit-content;\n        width: fit-content;\n        box-shadow: 0 0 0.5em #a3a3a3;\n        display: grid;\n\n        @media (min-width: 640px) {\n          max-width: 60%;\n        }\n        @media (max-width: 640px) {\n          max-width: 80%;\n        }\n        p {\n          display: inline-block;\n          margin-top: 0.3em;\n          margin-bottom: 0.3em;\n        }\n      }\n\n      div.npc1 {\n        background: white;\n        border-radius: 0 0.5em 0.5em 0.5em; /* top-left corner, top-right corner, bottom-right corner, bottom-left corner */\n        margin-left: 0.5em;\n        text-align: left;\n        justify-self: left;\n        animation-name: fadeIn;\n        animation-duration: 0.5s;\n      }\n\n      div.player {\n        background: #e1ffc7;\n        border-radius: 0.5em 0.5em 0 0.5em; /* top-left corner, top-right corner, bottom-right corner, bottom-left corner */\n        margin-right: 0.5em;\n        text-align: right;\n        justify-self: right;\n        animation-name: fadeIn;\n        animation-duration: 0.5s;\n        display: grid;\n        width: -moz-fit-content;\n        width: fit-content;\n\n        img {\n          max-width: 80%;\n          margin-top: auto;\n          margin-bottom: auto;\n          padding-left: 0.25em;\n          padding-right: 0.25em;\n          cursor: pointer;\n          max-height: 10em;\n        }\n        img:only-child {\n          margin: auto;\n        }\n\n        p.choice {\n          color: #2577e1;\n          cursor: pointer;\n          margin: 0;\n          padding-top: 0.3em;\n          padding-bottom: 0.3em;\n        }\n        p.choice:not(:last-child) {\n          border-bottom: solid 1px lightgray;\n        }\n      }\n\n      @keyframes fadeIn {\n        0% {opacity: 0;}\n        100% {opacity: 1;}\n      }\n      div.narrator {\n        background: gray;\n        border-radius: 0; /* top-left corner, top-right corner, bottom-right corner, bottom-left corner */\n        text-align: center;\n        justify-self: center;\n        border-radius: 0.5em;\n        background-color: #b7b5b5;\n        box-shadow: none;\n        animation-name: fadeIn;\n        animation-duration: 0.5s;\n      }\n    }\n  }\n\n  #next-chapter-container {\n    background-color: darkgray;\n    font-weight: 600;\n    cursor: pointer;\n      animation-name: fadeIn;\n      animation-duration: 2s;\n  }\n\n  // Commons\n  .is-hidden {\n    display: none !important;\n  }\n\n  .is-inline-flex {\n    display: inline-flex !important;\n  }\n</style>","\n<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import { gameState } from './stores/gameState';\n  import Leader from './profiles/Planificateur.svelte';\n  import Planificateur from './profiles/Planificateur.svelte';\n  import Bricoleur from './profiles/Bricoleur.svelte';\n  import Coequipier from './profiles/Coequipier.svelte';\n  import Idealiste from './profiles/Idealiste.svelte';\n  import Creatif from './profiles/Creatif.svelte';\n  import Audacieux from './profiles/Audacieux.svelte';\n  import Explorateur from './profiles/Explorateur.svelte';\n\n  let mainProfile: string;\n  let selectedProfile: string;\n\n  const profiles = {\n    leader:  {\n      name: 'Le Leader',\n      component: Leader,\n    },\n    bricoleur: {\n      name: 'Le Bricoleur',\n      component: Bricoleur,\n    },\n    coequipier: {\n      name: 'Le Coéquipier',\n      component: Coequipier,\n    },\n    planificateur: {\n      name: 'Le Planificateur',\n      component: Planificateur,\n    },\n    idealiste: {\n      name: 'L\\'Idéaliste',\n      component: Idealiste,\n    },\n    creatif: {\n      name: 'Le Créatif',\n      component: Creatif,\n    },\n    audacieux: {\n      name: 'L\\'Audacieux',\n      component: Audacieux,\n    },\n    explorateur: {\n      name: 'L\\'Explorateur',\n      component: Explorateur,\n    },\n  };\n\n  onMount(() => {\n    window.scrollTo(0, 0);\n  });\n\n  $: mainProfile = Object.entries($gameState.attribution).reduce((acc: string, [role, score]) => (\n       score > $gameState.attribution[acc] ? role : acc\n     ), 'planificateur');\n  $: selectedProfile = mainProfile;\n</script>\n\n\n<main>\n  <div id=\"congratulations\">\n    <h1>Félicitations!</h1>\n    <p>\n      Belle aventure ! Félicitations et merci d’avoir joué ! <br />\n      Voici les résultats du test :\n    </p>\n  </div>\n\n  <div id=\"profile\">\n    <h3>Ton profil:</h3>\n    <h2>{profiles[mainProfile].name}</h2>\n  </div>\n\n  <div id=\"graph\">\n    <img src=\"/assets/profile_results.svg\" alt=\"Graphe des résultats\"/>\n  </div>\n\n  <div id=\"description\">\n    <div class=\"has-text-centered\">\n      <select bind:value={selectedProfile}>\n        <option value=\"leader\">Le Planificateur [{$gameState.attribution.leader}]</option>\n        <option value=\"bricoleur\">Le Bricoleur [{$gameState.attribution.bricoleur}]</option>\n        <option value=\"coequipier\">Le Coequipier [{$gameState.attribution.coequipier}]</option>\n        <option value=\"planificateur\">Le Planificateur [{$gameState.attribution.planificateur}]</option>\n        <option value=\"idealiste\">L'Idéaliste [{$gameState.attribution.idealiste}]</option>\n        <option value=\"creatif\">Le Créatif [{$gameState.attribution.creatif}]</option>\n        <option value=\"audacieux\">L'Audacieux [{$gameState.attribution.audacieux}]</option>\n        <option value=\"explorateur\">L'Explorateur [{$gameState.attribution.explorateur}]</option>\n      </select>\n      <p class=\"caption\">Clique sur les autres profils pour voir leur description</p>\n    </div>\n    <svelte:component this={profiles[selectedProfile].component}/>\n  </div>\n</main>\n\n<style lang=\"scss\">\n\n  #profile {\n    color: white;\n    background-color: #800000;\n    margin-top: 1em;\n    margin-bottom: 2em;\n    h2 {\n      margin-top: 0.15em;\n      margin-bottom: 0.5em;\n      font-size: 2em;\n    }\n    h3 {\n      margin-bottom: 0;\n    }\n  }\n\n  #graph {\n    img {\n      width: 80%;\n      max-width: 25em;\n    }\n  }\n\n  #description {\n    text-align: left;\n    max-width: 35em;\n    margin: auto;\n    padding-top: 2em;\n  }\n\n  p.caption {\n    font-size: 0.8em;\n    font-style: italic;\n    margin-bottom: 2em;\n    margin-top: 0;\n  }\n\n  // Commons\n  main {\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n\n    // Phones\n    @media (max-width: 768px) {\n      max-width: 50em;\n    }\n\n    // Tablets\n    @media (min-width: 769px) and (max-width: 1023px) {\n      margin-left: auto;\n      margin-right: auto;\n      min-width: 90%;\n    }\n\n    // Desktops\n    @media (min-width: 1024px) {\n      max-width: 50em;\n      margin-left: auto;\n      margin-right: auto;\n      min-width: 50%;\n    }\n  }\n  .has-text-centered {\n    text-align: center;\n  }\n</style>","<script lang=\"ts\">\n  import { chapters } from './stores/chapters';\n\n  const message = $chapters.error;\n</script>\n\n<main>\n  <h1>Voyage au bout du monde</h1>\n  <h3>Une aventure d'introspection</h3>\n  <div class=\"error-container\">\n    <p class=\"error\">Une erreur est survenue lors du chargement des chapitres du jeu: <br />{message}</p>\n  </div>\n</main>\n\n<style lang=\"scss\">\n  div.error-container {\n    margin:auto;\n\n    @media (min-width: 640px) {\n      max-width: 80%;\n    }\n    @media (max-width: 640px) {\n      max-width: 90%;\n    }\n  }\n  p.error {\n    color: #a10000;\n    padding: 1em;\n    text-align: center;\n    border: #a10000 solid 1px;\n    border-radius: 0.3em;\n  }\n\n  // Commons\n  h1 {\n    color: #a10000;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 50em;\n    margin: 0 auto;\n  }\n</style>","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import { gameState } from './stores/gameState';\n  import { appStatus } from './stores/appStatus';\n  import { GameStatus } from './enums';\n  import WelcomeScreen from \"./WelcomeScreen.svelte\";\n  import GameScreen from \"./GameScreen.svelte\";\n  import ResultScreen from \"./ResultScreen.svelte\";\n  import ErrorScreen from \"./ErrorScreen.svelte\";\n\n  let showGameScreen: boolean = false;\n  let showResultScreen: boolean = false;\n  let showErrorScreen: boolean = false;\n\n  onMount(() => {\n    const localStorage = window.localStorage;\n\n    if (localStorage && localStorage.getItem('state')) {\n      gameState.set(JSON.parse(localStorage.getItem('state')));\n    }\n  });\n\n  // Svelte doesn't give access to Typescript out of <script> tag\n  $: showGameScreen = ($appStatus === GameStatus.ONGOING);\n  $: showResultScreen = ($appStatus === GameStatus.FINISHED);\n  $: showErrorScreen = ($appStatus === GameStatus.ERROR);\n</script>\n\n{#if showGameScreen}\n  <GameScreen />\n{:else if showResultScreen}\n  <ResultScreen />\n{:else if showErrorScreen}\n  <ErrorScreen />\n{:else}\n  <WelcomeScreen />\n{/if}","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {}\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","set_store_value","ret","value","set","current_component","is_hydrating","upper_bound","low","high","key","mid","append","target","node","hydrate_init","children","childNodes","m","Int32Array","length","p","longest","i","seqLen","idx","claim_order","newLen","Math","max","lis","toMove","last","cur","reverse","sort","j","anchor","insertBefore","init_hydrate","undefined","actual_end_child","parentElement","firstChild","nextSibling","parentNode","appendChild","insert","detach","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","select_option","select","option","__value","selected","toggle_class","toggle","classList","set_current_component","get_current_component","Error","onMount","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","flushing","seen_callbacks","Set","update","pop","has","add","clear","fragment","before_update","dirty","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","destroy_block","lookup","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","Map","deltas","child_ctx","get","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","create_component","mount_component","customElement","new_on_destroy","map","filter","destroy_component","detaching","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","skip_bound","ready","rest","fill","make_dirty","hydrate","nodes","Array","from","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","readable","start","writable","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","gameState","gender","language","attribution","leader","bricoleur","coequipier","planificateur","idealiste","creatif","audacieux","explorateur","currentChapterId","stores","initial_value","single","isArray","stores_array","auto","inited","values","pending","cleanup","sync","result","unsubscribers","derived","$gameState","reduce","id","k","GameStatus","appStatus","UNSTARTED","_a","isGenderConfigured","newGamePressed","isNewGame","startGame","$appStatus","ONGOING","startNewGame","entries","PAUSED","FINISHED","chapters","promises","async","scenarioFile","fetch","String","padStart","ok","scenario","JSON","parse","all","chaptersArray","results","acc","assign","metadata","chapter","dialogNodes","catch","e","error","message","imagePath","imageAlt","character","__awaiter","thisArg","_arguments","P","generator","displayedNodeIds","nextChapterId","displayNextChapterBox","displayResultsBox","answersNodeIds","showIsTyping","npc1Typing","playerTyping","displayNextDialogNode","parentNodeId","isRootNode","nextNodeIds","$chapters","$currentChapterId","nextNodes","_","includes","currentSpeaker","maxChapterId","Number","setTimeout","displayAnswerDialogBox","timerIsTyping","floor","random","timerReply","addAnswer","dialogNodeid","v","waitStoresToLoad","window","scrollTo","body","scrollHeight","ERROR","answerDialogNodeId","mainProfile","selectedProfile","profiles","Leader","Bricoleur","Coequipier","Planificateur","Idealiste","Creatif","Audacieux","Explorateur","role","score","selected_option","querySelector","showGameScreen","showResultScreen","showErrorScreen","localStorage","getItem"],"mappings":"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"}